import type { Meta, StoryObj } from '@storybook/angular';
import { AlertComponent } from '../../app/components/alert/alert.component';

const meta: Meta<AlertComponent> = {
  title: 'Components/Alerts/Alert',
  component: AlertComponent,
  tags: ['autodocs'],
  parameters: {
    docs: {
      description: {
        component: `
## Uso

Este componente puede incluir un mensaje de texto, un √≠cono representativo del tipo de alerta y, en algunos casos, un bot√≥n de acci√≥n para responder al mensaje. Las alertas pueden ser temporales o persistentes, dependiendo del contexto de uso.

- **Mensajes de √©xito:** Confirmar que una acci√≥n del usuario se ha realizado correctamente (ejemplo: ‚ÄúTu solicitud ha sido enviada con √©xito‚Äù).
- **Advertencias:** Notificar sobre situaciones que requieren atenci√≥n, pero que no bloquean la acci√≥n del usuario (ejemplo: ‚ÄúTu sesi√≥n est√° por expirar‚Äù).
- **Errores:** Informar fallos en el sistema o en una acci√≥n del usuario (ejemplo: ‚ÄúError al cargar el archivo, intenta nuevamente‚Äù).
- **Informaci√≥n general:** Mostrar datos relevantes sin requerir una acci√≥n inmediata (ejemplo: ‚ÄúNuevo horario de atenci√≥n disponible‚Äù).
- **Estados de carga o procesos en segundo plano:** Alertar sobre tareas en progreso o cambios de estado (ejemplo: ‚ÄúProcesando tu solicitud‚Ä¶‚Äù).
- **Notificaciones del sistema:** Anunciar eventos importantes que afectan la experiencia del usuario (ejemplo: ‚ÄúNueva actualizaci√≥n disponible‚Äù).
- **Validaciones de formularios:** Indicar errores o requisitos en campos de entrada (ejemplo: ‚ÄúEl correo ingresado no es v√°lido‚Äù).
- **Autenticaci√≥n y permisos:** Informar sobre accesos restringidos o credenciales incorrectas (ejemplo: ‚ÄúTu contrase√±a es incorrecta, intenta de nuevo‚Äù).

---

## Mejores pr√°cticas

### ‚úÖ S√≠

- **Utilizar las alertas seg√∫n su prop√≥sito:** Cada tipo de alerta (√©xito, advertencia, error e informaci√≥n) debe usarse en el contexto correcto.
- **Mantener los mensajes concisos y claros:** Evitar texto innecesario o mensajes largos que puedan ser ignorados.
- **Incluir iconograf√≠a cuando sea necesario:** Ayuda a reforzar visualmente el mensaje sin depender solo del texto.
- **Configurar el tiempo de visibilidad adecuado:** Las alertas temporales deben permanecer el tiempo suficiente para ser le√≠das sin interrumpir la experiencia del usuario.
- **Permitir la opci√≥n de cerrar alertas cuando sea relevante:** En alertas no cr√≠ticas, se recomienda agregar un bot√≥n de cierre o acci√≥n.
- **Mantener consistencia en colores y estilos:** Usar las variantes de alerta definidas en la librer√≠a UI sin personalizaci√≥n excesiva.

### üö´ No

- **No usar alertas para contenido extenso:** Si se necesita m√°s informaci√≥n, es mejor redirigir al usuario a otra vista.
- **No saturar la interfaz con alertas simult√°neas:** Demasiadas notificaciones pueden ser intrusivas y afectar la experiencia de usuario.
- **No cambiar los colores de las alertas sin justificaci√≥n:** Cada color tiene un prop√≥sito espec√≠fico en la jerarqu√≠a visual.
- **No usar alertas en lugar de modales o tooltips:** Si el usuario necesita interactuar con la informaci√≥n, se deben usar otros componentes m√°s adecuados.
- **No bloquear la navegaci√≥n con alertas persistentes:** Las alertas deben integrarse de manera no obstructiva en la interfaz.
- **No eliminar la opci√≥n de cierre en alertas informativas o no cr√≠ticas:** El usuario debe poder descartar mensajes que no requieran acci√≥n obligatoria.

---

## Elementos clave

- **√çcono representativo:** Refuerza visualmente el tipo de alerta (√©xito, error, advertencia, informaci√≥n).
- **Mensaje corto:** Texto conciso que comunica la informaci√≥n de manera clara.
- **Bot√≥n de cierre:** Permite al usuario descartar la alerta si es necesario.
        `,
      },
    },
  },
  argTypes: {
    textAlert: {
      control: 'text',
      description: 'Texto que se muestra dentro de la alerta',
    },
    showIcon: {
      control: 'boolean',
      description: 'Muestra u oculta el √≠cono del c√≠rculo izquierdo',
    },
    style: {
      control: 'select',
      options: ['default', 'success', 'warning', 'error'],
      description:
        'Fondo de la alerta (default = blanco, success = verde, warning = amarillo, error = rojo)',
    },
    type: {
      control: 'select',
      options: ['alert', 'check', 'x'],
      description: '√çcono que aparece dentro del c√≠rculo izquierdo',
    },
    color: {
      control: 'select',
      options: ['green', 'yellow', 'red'],
      description: 'Color del c√≠rculo que rodea al √≠cono izquierdo',
    },
  },
  args: {
    textAlert: 'Estado',
    showIcon: true,
    style: 'default',
    type: 'alert',
    color: 'green',
  },
};

export default meta;
type Story = StoryObj<AlertComponent>;

export const Default: Story = {};
